@page "/clientes/editar/{idCliente:int}"
@inject IMaestroProxy ProxyMaestro;
@inject IClienteProxy ProxyCliente;
@inject NavigationManager navegator;
@inject IToastService ToastService;

<h4>Mantenimiento de Cliente</h4>

<Tabs Class="mt-5">
    <Tab Title="Datos personales" IsActive="true" Name="tabPrincipal">
        <Content>
            <DatosPersonales Request="DatosPersonales" OnGuardarDatosPersonales="ActualizarDatosPersonales"></DatosPersonales>
        </Content>
    </Tab>
    <Tab Title="Control Fisico" IsActive="true" Name="tabControlFisico">
        <Content>
            <ControlFisico ProveedorData="GrillaParametros" ControlFisicoClienteResponse="ControlFisicoClienteResponse" OnAgregarParametro="AgregarControlFisico" @ref="tabControlFisico" />
        </Content>
    </Tab>
</Tabs>


@code {
    [Parameter]
    public int idCliente { get; set; } = 0;

    #region Componentes
    public ControlFisico tabControlFisico { get; set; } = new ControlFisico();
    #endregion

    protected override async Task OnInitializedAsync()
    {
        if (idCliente != 0)
        {
            await ObtenerDatosById();
            await ListarParametrosControlFisico();
        }
    }


    #region Datos Personales
    public DatosPersonalesRequest DatosPersonales { get; set; } = new();

    private async Task ObtenerDatosById()
    {
        try
        {
            var resultado = await ProxyCliente.GetDatosPersonalesById(idCliente);
            if (resultado != null && resultado.Data != null)
            {
                var datos = resultado.Data;
                Utils.Map(datos, DatosPersonales);
            }

        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Error al Obtener los datos personales:{ex.Message}");
        }
    }


    private async Task ActualizarDatosPersonales()
    {
        try
        {
            DatosPersonales.IdEstablecimiento = Constantes.IdEstablecimientoDefault;
            var resultado = await ProxyCliente.ActualizarDatosPersonales(DatosPersonales);

            if (resultado is { Success: false })
                ToastService.ShowWarning($"Error al actualizar datos personales:{resultado.Message}");
            else
            {
                await ObtenerDatosById();
                ToastService.ShowSuccess($"Datos personales actualizados");
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowWarning($"Error al actualizar datos personales:{ex.Message}");
        }
    }

    #endregion

    #region Control Fisico
    List<ListaControlFisicoClienteResponse> ControlFisicoClienteResponse { get; set; } = new();
    public ListaDetalleMaestroRequest RequestDetalleMaestro { get; set; } = new() { Pagina = 1, Filas = 10 };
    public ICollection<DetalleMaestroResponse> ListaMaestroDetalle { get; set; } = new List<DetalleMaestroResponse>();

    private async Task ListarParametrosControlFisico()
    {
        try
        {
            var resultado = await ProxyCliente.GetControlFisicoParametros(idCliente);
            if (resultado is { Success: false })
            {
                ToastService.ShowWarning($"Error al listar parametros de control fisico:{resultado.Message}");
            }
            else
            {
                if (resultado.Data != null)
                    ControlFisicoClienteResponse = resultado.Data;
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Error al listar control fisico: {ex.Message}");
        }

    }



    private async Task<GridDataProviderResult<DetalleMaestroResponse>> GrillaParametros(GridDataProviderRequest<DetalleMaestroResponse> request)
    {
        try
        {
            RequestDetalleMaestro.codigoMaestro = CodigoMaestro.CTRL_FISICO;
            var response = await ProxyMaestro.ListarDetalleMaestroByCodigo(RequestDetalleMaestro);
            if (response is { Success: true })
            {
                if (response.Collection != null)
                {
                    ListaMaestroDetalle = response.Collection;

                    ListaMaestroDetalle
                        .Where(p => ControlFisicoClienteResponse.Select(e => e.IdParametro).Contains(p.IdDetalleMaestro))
                        .ToList()
                        .ForEach(p => p.EsExistente = true);

                    request.ApplyTo(ListaMaestroDetalle);

                    return await Task.FromResult(new GridDataProviderResult<DetalleMaestroResponse>()
                        {
                            Data = response.Collection,
                            TotalCount = response.TotalRegistros
                        });
                }
                else return await Task.FromResult(new GridDataProviderResult<DetalleMaestroResponse>());

            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Error al listar los parametros: {ex.Message}");
        }
        return await Task.FromResult(new GridDataProviderResult<DetalleMaestroResponse>());
    }

    private async Task AgregarControlFisico(DetalleMaestroResponse parametro)
    {
        try
        {
            var parametroNuevo = new ParametroClienteRequest() { Idcliente = idCliente, Idparametro = parametro.IdDetalleMaestro };

            var resultado = await ProxyCliente.GuardarParametroControlFisico(parametroNuevo);
            if (resultado is { Success: false })
            {
                ToastService.ShowWarning($"Error al guardar parametro de control fisico:{resultado.Message}");
            }
            else
            {
                ToastService.ShowSuccess($"Nuevo control fisico agregado.");
                await tabControlFisico.ModalParametrosControl.HideAsync();
                await ListarParametrosControlFisico();
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Error al guardar parametro de control fisico: {ex.Message}");
        }

    }

    #endregion

}
