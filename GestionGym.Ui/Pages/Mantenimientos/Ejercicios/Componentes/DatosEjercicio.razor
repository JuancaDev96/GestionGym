@using GestionGym.Dto.Request.Ejercicios
@inject IToastService ToastService;
@inject NavigationManager Navegador;

<GroupBox Titulo="Información del ejercicio" Class="mt-5">
    <Contenido>
        <EditForm Model="Request" OnValidSubmit="OnGuardarEjercicio">
            <DataAnnotationsValidator />
            <div class="row mt-3">
                <div class="col-md-4">
                    <div class="form-group">
                        <label>Grupo muscular: </label>
                        <select class="form-select" @bind="Request.IdGrupoMuscular">
                            <option value="0" selected>-Seleccione Grupo muscular-</option>
                            @foreach (var item in ListaGrupoMuscular)
                            {
                                <option value="@item.IdDetalleMaestro" title="@item.Descripcion">@item.Valor</option>
                            }
                        </select>
                        <ValidationMessage For="() => Request.IdGrupoMuscular" />
                    </div>
                </div>

                <div class="col-md-4">
                    <div class="form-group">
                        <label>Nombres: </label>
                        <input class="form-control" @bind="Request.Nombre" />
                        <ValidationMessage For="() => Request.Nombre" />
                    </div>
                </div>

                <div class="col-md-8">
                    <div class="form-group">
                        <label>Descripción: </label>
                        <textarea class="form-control" @bind="Request.Descripcion" />
                        <ValidationMessage For="() => Request.Descripcion" />
                    </div>
                </div>
            </div>
            <button class="d-none" id="btnGuardarEjercicio" type="submit">guardar</button>
        </EditForm>

    </Contenido>
</GroupBox>

<GroupBox Titulo="Control de rutinas" Class="mt-5">
    <Contenido>
        <div class="row gx-4 mt-3">
            <div class="col text-end">
                <button class="btn btn-success btn-xs" @onclick="OnAgregarRutina"><i class="bi bi-plus"></i> Agregar</button>
            </div>
        </div>
        <div class="row">
            <div class="table-responsive">
                <table class="table table-hover">
                    <thead>
                        <tr>
                            <th scope="col">Series</th>
                            <th scope="col">Repeticiones</th>
                            <th scope="col">Comentarios</th>
                            <th scope="col"></th>
                        </tr>
                    </thead>
                    <tbody>

                        @foreach (var item in ListaRutinas)
                        {
                            <tr>
                                <td>
                                    <input type="number" class="form-control" @bind="item.Series" />
                                </td>
                                <td>
                                    <input type="number" class="form-control" @bind="item.Repeticiones" />
                                </td>
                                <td>
                                    <input class="form-control" @bind="item.Descripcion" />
                                </td>
                                <td>
                                    <button class="btn btn-sm btn-success" @onclick="() => OnRemoverRutina(item)"><i class="bi bi-check"></i></button>
                                    <button class="btn btn-sm btn-warning" @onclick="() => OnRemoverRutina(item)"><i class="bi bi-trash"></i></button>
                                </td>
                            </tr>
                        }

                    </tbody>
                </table>
            </div>
        </div>

    </Contenido>
</GroupBox>

@if (Request.Id != 0)
{
    <GroupBox Titulo="Control de recursos" Class="mt-5">
        <Contenido>
            <div class="row gx-4 mt-3">
                <div class="col text-end">
                    <button class="btn btn-success btn-xs" @onclick="OnAgregarRecurso"><i class="bi bi-plus"></i> Agregar</button>
                </div>
            </div>

        </Contenido>
    </GroupBox>
}

<div class="row gx-4 mt-4">
    <div class="col">
        <label for="btnGuardarEjercicio" type="button" class="btn btn-primary">Guardar</label>
        <button type="button" class="btn btn-danger" @onclick="OnCancelar">Cancelar</button>
    </div>
</div>

<Modal @ref="ModalAgregarRecurso" UseStaticBackdrop="true" Size="ModalSize.Large">
    <HeaderTemplate>
        <h4>Registrar recurso nuevo</h4>
    </HeaderTemplate>
    <BodyTemplate>
        <div class="row">

            <div class="col-md-12">
                <div class="form-group">
                    <label>Tipo Recurso: </label>
                    <select class="form-select" @oninput="OnChangeTipoRecurso">
                        <option value="0" selected>-Seleccione Tipo Recurso-</option>
                        @foreach (var item in ListaTipoRecurso)
                        {
                            <option value="@item.IdDetalleMaestro" title="@item.Descripcion">@item.Valor</option>
                        }
                    </select>
                </div>
            </div>

            <div class="col-md-12 mt-3 @cssUrl">
                <label class="form-label">Ingrese URL:</label>
                <input class="form-control" />
            </div>

            <div class="col-md-12 mt-3 @cssRecurso">
                <label class="form-label">Recurso:</label>
                <InputFile class="form-control" OnChange="OnFileUploaded" />
            </div>

        </div>
    </BodyTemplate>
    <FooterTemplate>
        <div class="text-end">
            <button type="button" class="btn btn-outline-danger me-3" @onclick="() => OnCancelarModal()">Cancelar</button>
            <button type="button" class="btn btn-primary" @onclick="@Aceptar">Registrar</button>
        </div>
    </FooterTemplate>
</Modal>

@code {
    [Parameter] public EjercicioRequest Request { get; set; } = new();
    [Parameter] public EventCallback OnGuardar { get; set; } = default!;
    [Parameter] public List<RutinaEjercicioRequest> ListaRutinas { get; set; } = new();
    [Parameter] public List<DetalleMaestroResponse> ListaTipoRecurso { get; set; } = new();
    [Parameter] public List<DetalleMaestroResponse> ListaGrupoMuscular { get; set; } = new();


    public Modal ModalAgregarRecurso { get; set; } = default!;
    private int ordenRutina { get; set; }
    private string cssUrl { get; set; } = "d-none";
    private string cssRecurso { get; set; } = "";


    private void OnAgregarRutina()
    {
        RutinaEjercicioRequest nueva = new RutinaEjercicioRequest();
        ListaRutinas.Add(nueva);
    }

    private void OnRemoverRutina(RutinaEjercicioRequest item)
    {
        ListaRutinas.Remove(item);
    }



    private async Task OnAgregarRecurso()
    {
        await ModalAgregarRecurso.ShowAsync();
    }

    private async Task OnFileUploaded(InputFileChangeEventArgs e)
    {
        try
        {
            var file = e.File;
            var buffer = new byte[file.Size];
            await file.OpenReadStream(Constantes.MaxFileSize).ReadAsync(buffer);

            var arhivo = Convert.ToBase64String(buffer);
            var nombre = file.Name;
        }
        catch (Exception ex)
        {
            ToastService.ShowError(ex.Message);
        }
    }

    private async Task OnCancelarModal()
    {
        await ModalAgregarRecurso.HideAsync();
    }

    private async Task Aceptar()
    {
        await OnGuardar.InvokeAsync();
    }

    private void OnChangeTipoRecurso(ChangeEventArgs e)
    {
        var IdTipoRecurso = Convert.ToInt32(e.Value);

        cssUrl = "d-none"; cssRecurso = "";

        if (IdTipoRecurso > 0)
        {
            var codigo = ListaTipoRecurso.First(p => p.IdDetalleMaestro == IdTipoRecurso).Codigo;

            if (codigo == CodigoMaestro.TR_YOUTUBE)
            {
                cssUrl = "";
                cssRecurso = "d-none";
            }
        }
        StateHasChanged();
    }

    private bool ValidarRutina()
    {
        if (ListaRutinas != null && ListaRutinas.Count > 0)
        {
            var noValidos = ListaRutinas.Where(p => string.IsNullOrEmpty(p.Descripcion) || p.Series == 0 || p.Repeticiones == 0);

            if (noValidos.Count() > 0) return false;
        }
        return true;
    }

    private async Task OnGuardarEjercicio()
    {
        if (!ValidarRutina())
        {
            ToastService.ShowWarning("Faltan completar datos de la rutina.");
            return;
        }
        await OnGuardar.InvokeAsync();
    }

    private void OnCancelar()
    {
        Navegador.NavigateTo(Routes.EjerciciosListado);
    }
}
